# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JT4B1F8i4tbeU2n-HF_GTKaqKako7Bhm
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('car_details.csv')

# Explore the dataset
print(df.head())
print(df.info())

# Handle missing values
print(df.isnull().sum())
df = df.dropna()

# Encode categorical variables
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['fuel'] = le.fit_transform(df['fuel'])
df['seller_type'] = le.fit_transform(df['seller_type'])
df['transmission'] = le.fit_transform(df['transmission'])
df['owner'] = le.fit_transform(df['owner'])

# Exploratory Data Analysis
# Visualize the distribution of numerical features
plt.figure(figsize=(12, 6))
sns.displot(df['year'], kde=True)
plt.title('Distribution of Car Year')
plt.show()

plt.figure(figsize=(12, 6))
sns.displot(df['selling_price'], kde=True)
plt.title('Distribution of Selling Price')
plt.show()

plt.figure(figsize=(12, 6))
sns.displot(df['km_driven'], kde=True)
plt.title('Distribution of Kilometers Driven')
plt.show()

# Analyze the relationships between features
plt.figure(figsize=(12, 6))
# Calculate the correlation matrix only for numerical features
sns.heatmap(df.select_dtypes(include=np.number).corr(), annot=True, cmap='YlOrRd')
plt.title('Correlation Matrix')
plt.show()

# Prepare the data for machine learning
# Prepare the data for machine learning
X = df.drop(['name','selling_price'], axis=1) # Remove 'selling_price' from features
y = df['selling_price'] # Predict 'selling_price'

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train and evaluate machine learning models
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)
lr_mse = mean_squared_error(y_test, lr_pred)
lr_r2 = r2_score(y_test, lr_pred)

rf = RandomForestRegressor()
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)
rf_mse = mean_squared_error(y_test, rf_pred)
rf_r2 = r2_score(y_test, rf_pred)

# Determine the best model based on the evaluation metrics

# Save the best model
import pickle
pickle.dump(best_model, open('car_details_model.pkl', 'wb'))

# Load the saved model
loaded_model = pickle.load(open('car_details_model.pkl', 'rb'))