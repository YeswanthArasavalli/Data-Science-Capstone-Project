# -*- coding: utf-8 -*-
"""env.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OMOKTnyVCk-5zVMtXVE3G5vOYeWQNQvW
"""

import streamlit as st
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, BaggingRegressor
import pickle

# Load the dataset
df = pd.read_csv('Car.csv')

# Sidebar for user input
st.sidebar.header("Car Details Input")

# Input fields for user to enter car details
Year = st.sidebar.slider("Year", int(df['Year'].min()), int(df['Year'].max()), int(df['Year'].mean()))
Km_driven = st.sidebar.number_input("Kilometers Driven", min_value=0, value=int(df['Km_driven'].mean()))
Fuel = st.sidebar.selectbox("Fuel Type", df['Fuel'].unique())
Seller_type = st.sidebar.selectbox("Seller Type", df['Seller_type'].unique())
Transmission = st.sidebar.selectbox("Transmission", df['Transmission'].unique())
Owner = st.sidebar.selectbox("Owner", df['Owner'].unique())

# Preprocess user input
user_input = pd.DataFrame({
    'Year': [Year],
    'Km_driven': [Km_driven],
    'Fuel': [Fuel],
    'Seller_type': [Seller_type],
    'Transmission': [Transmission],
    'Owner': [Owner]
})

# Encode categorical variables
le = LabelEncoder()
user_input['Fuel'] = le.fit_transform(user_input['Fuel'])
user_input['Seller_type'] = le.fit_transform(user_input['Seller_type'])
user_input['Transmission'] = le.fit_transform(user_input['Transmission'])
user_input['Owner'] = le.fit_transform(user_input['Owner'])

# Separate features (X) and target variable (y)
X = df.drop(['Selling_price', 'Name'], axis=1)

# Encode categorical features in the main dataframe
X['Fuel'] = le.fit_transform(X['Fuel']) # Encode 'fuel' column in the main dataframe
X['Seller_type'] = le.fit_transform(X['Seller_type'])
X['Transmission'] = le.fit_transform(X['Transmission'])
X['Owner'] = le.fit_transform(X['Owner'])
X = pd.get_dummies(X, columns=['Transmission'])

y = df['Selling_price']


# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Linear Regression
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
lr_predictions = lr_model.predict(X_test)
lr_mse = mean_squared_error(y_test, lr_predictions)
lr_r2 = r2_score(y_test, lr_predictions)
print(f"Linear Regression - MSE: {lr_mse}, R-squared: {lr_r2}")

# Random Forest Regression
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)
rf_predictions = rf_model.predict(X_test)
rf_mse = mean_squared_error(y_test, rf_predictions)
rf_r2 = r2_score(y_test, rf_predictions)
print(f"Random Forest Regression - MSE: {rf_mse}, R-squared: {rf_r2}")

# Gradient Boosting Regression
gb_model = GradientBoostingRegressor(random_state=42)
gb_model.fit(X_train, y_train)
gb_predictions = gb_model.predict(X_test)
gb_mse = mean_squared_error(y_test, gb_predictions)
gb_r2 = r2_score(y_test, gb_predictions)
print(f"Gradient Boosting Regression - MSE: {gb_mse}, R-squared: {gb_r2}")

# Bagging Regression
bagging_model = BaggingRegressor(random_state=42)
bagging_model.fit(X_train, y_train)
bagging_predictions = bagging_model.predict(X_test)
bagging_mse = mean_squared_error(y_test, bagging_predictions)
bagging_r2 = r2_score(y_test, bagging_predictions)
print(f"Bagging Regression - MSE: {bagging_mse}, R-squared: {bagging_r2}")


# Save the best model (e.g., Random Forest)
best_model = rf_model  # Replace with the actual best model
filename = 'best_model.sav'
pickle.dump(best_model, open(filename, 'wb'))
# Load the saved model
loaded_model = pickle.load(open('best_model.sav', 'rb'))

# Make prediction
if st.sidebar.button("Predict Selling Price"):
    prediction = loaded_model.predict(user_input)
    st.write(f"Predicted Selling Price: {prediction[0]}")

# Display the dataset
st.title("Car Details Dataset")
st.write(df.head())

# Display the correlation matrix
st.title("Correlation Matrix")
numerical_df = df.select_dtypes(include=['number'])
st.write(numerical_df.corr())

# Display the histograms
st.title("Histograms")

st.write("Distribution of Car Year")
fig, ax = plt.subplots()
ax.hist(df['Year'])
st.pyplot(fig)

st.write("Distribution of Selling Price")
fig, ax = plt.subplots()
ax.hist(df['Selling_price'])
st.pyplot(fig)

st.write("Distribution of Kilometers Driven")
fig, ax = plt.subplots()
ax.hist(df['Km_driven'])
st.pyplot(fig)

# Display the scatter plot
st.title("Scatter Plot")
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Year', y='Selling_price', data=df)
plt.title('Year vs Selling Price')
st.pyplot(plt)

# Display the pairplot
st.title("Pairplot")
sns.pairplot(df[['Selling_price', 'Km_driven', 'Year']])
st.pyplot(plt)